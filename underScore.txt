*Collection集合函数(array,object,nodeList,arguments...)
	list为array类型时iteratee参数(value,index,list)
	list为object类型时iteratee参数(value,key,list)
_.each(list,iteratee,[context])  //遍历list所有项,无返回值
EX:_.each([1,2,3],alert,window);  //undefined
_.map(list,iteratee,[context])  //list中所有项执行同一函数,并返回新list
EX:_.map([1,2,3],function(num){return num*3});  //3,6,9
_.reduce(list,iteratee,[memo],[context])  //把list中元素归结为一个单独的数值并返回,memo为reduce函数的初始值,如果没有memo参数则第一项为初始值且不参于执行iteratee函数
EX:_.reduce([1,2,3],function(memo,num){return memo+num},4);  //10
   _.reduce([1,2,3],function(memo,num){return memo+num});  //6
_.reduceRight(list,iteratee,memo,[context])  //从右侧开始组合的元素的reduce函数
EX:
	var list=[[1,2],[2,3],[3,4]];
	var result=_.reduceRight(list,function(a,b){return a.concat(b)},[]);  //[3,4,2,3,1,2]
_.find(list,predicate,[context])  //在list中逐项查找,返回第一个通过predicate迭代函数真值检测的元素值,如果没有值传递给测试迭代器将返回undefined,如果找到匹配的元素,函数将立即返回,不会遍历整个list。
EX:_.find([1,2,3,4,5],function(num){return num%2==0});  //2
_.filter(list,predicate,[context])  //遍历list中的每个值,返回包含所有通过predicate真值检测的元素值
EX:_.filter([1,2,3,4,5],function(num){return num%2==0});  //2,4
_.where(list, properties)  //遍历list中的每一个值,返回一个数组,这个数组包含包含properties所列出的属性的所有的键值对
EX:
	var lists=[
		{name:"aa",age:22},
		{title:"hello world",name:"aa",age:22},
		{name:"bb",age:22}
	];
	_.where(lists,{name:"aa","age":22});  //[{name:"aa",age:22},{title:"hello world",name:"aa",age:22},]
_.findWhere(list, properties)  //遍历list中的每一个值,返回匹配properties所列出的属性的所有的键值对的第一个
EX:
	var lists=[
		{name:"aa",age:22},
		{title:"hello world",name:"aa",age:22},
		{name:"bb",age:22}
	];
	_.findWhere(lists,{name:"aa","age":22});  //{name:"aa",age:22}
_.reject(list,predicate,[context])  //返回list中没有通过predicate真值检测的元素集合,与filter相反
EX:_.reject([1,2,3,4,5],function(num){return num%2==0});  //1,3,5
_.every(list,[predicate],[context])  //如果list中的所有元素都通过predicate的真值检测就返回true
EX:
	_.every([1,2,3,4,5],function(num){return num%2==0});  //false
	_.every([2,4],function(num){return num%2==0});  //true
_.some(list,[predicate],[context])  //如果list中有任何一个元素通过predicate的真值检测就返回true,一旦找到了符合条件的元素,就直接中断对list的遍历
EX:_.some([1,2,3,4,5],function(num){return num%2==0});  //true
_.contains(list,value)  //如果list包含指定的value则返回true(注:使用===检测),如果list是数组,内部使用indexOf判断。
EX:_.contains([1,2,3],2);  //true
_.invoke(list,methodName,*arguments)  //在list的每个元素上执行methodName方法,任何传递给invoke的额外参数,invoke都会在调用methodName方法的时候传递给它
EX:_.invoke([[1,5,2],[2,1,4]],'sort');  //[[1,2,5],[1,2,4]]
_.pluck(list,propertyName)  //简化map方法,萃取对象数组中某属性值,返回一个数组
EX:
	var lists=[
		{name:"aa",age:20},
		{name:"bb",age:21},
		{name:"cc",age:22},
	]
	_.pluck(lists,'name');  //aa,bb,cc
_.max(list,[iteratee],[context])  //返回list中的最大值,如果传递iteratee参数,iteratee将作为list中每个值的排序依据,如果list为空,将返回-Infinity,所以你可能需要事先用isEmpty检查list 
EX:
	var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];
	_.max(stooges, function(stooge){ return stooge.age; });  //{name: 'curly', age: 60}
_.min(list,[iteratee],[context])  //返回list中的最小值,如果传递iteratee参数,iteratee将作为list中每个值的排序依据,如果list为空,将返回-Infinity,所以你可能需要事先用isEmpty检查list
EX:
	var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];
	_.min(stooges, function(stooge){ return stooge.age; });  //{name: 'moe', age: 40}
_.sortBy(list,iteratee,[context])  //返回一个排序后的list拷贝副本,如果传递iteratee参数,iteratee将作为list中每个值的排序依据,迭代器也可以是字符串的属性的名称进行排序的
EX:_.sortBy([4,1,3,2,6],function(num){return Math.sin(num)});  //[4,6,3,1,2]
_.groupBy(list,iteratee,[context])  //把一个集合分组为多个集合,通过iterator返回的结果进行分组,如果iterator是一个字符串而不是函数,那么将使用iterator作为各元素的属性名来对比进行分组
EX:
	_.groupBy([1.3,2.1,2.4],function(num){return Math.floor(num);});  //{1:[1.3],2:[2.1,2.4]}
	_.groupBy(['one','two','three'],'length');  //{3:["one", "two"],5:["three"]}
_.indexBy(list,iteratee,[context])  //给定一个list,和一个用来返回一个在列表中的每个元素键的iterator函数(或属性名),返回一个每一项索引的对象,和groupBy非常像,但是当你知道你的键是唯一的时候可以使用indexBy
EX:
	var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];
	_.indexBy(stooges,'age'); 
	//{
		"40": {name: 'moe', age: 40},
		"50": {name: 'larry', age: 50},
		"60": {name: 'curly', age: 60}
	}
_.countBy(list,iteratee,[context])  //排序一个列表组成一个组,并且返回各组中的对象的数量的计数,类似groupBy,但是不是返回列表的值,而是返回在该组中值的数目
EX:_.countBy([1,2,3,4,5],function(num){return num%2==0?'even':'odd'});  //{'odd':3,'even':2}
_.shuffle(list)  //返回一个随机乱序的list副本
EX:_.shuffle([1,4,2,5,3]);  //随机排序的数组
_.sample(list,[n])  //从list中产生一个随机样本,传递一个数字表示从list中返回n个随机元素,否则将返回一个单一的随机项(V1.5.0出错)
EX:
	_.sample([1,3,5,2,4]);  //随机返回一个数
	_.sample([1,3,5,2,4],2);  //随机返回两个数
_.toArray(list)  //把list(任何可以迭代的对象)转换成一个数组,在转换arguments对象时非常有用
EX:
	_.toArray({
		"name":"aa",
		"age":22
	})   //["aa",22]
_.size(list)  //返回list的长度
EX:
	var obj={
		"name":"aa",
		"age":22,
		"title":"test",
		sayName:function(){
			alert(this.name);
		}
	};
	_.size(obj);  //4
_.partition(array,predicate)  //拆分一个数组为两个数组:第一个数组其元素都满足predicate迭代函数,而第二个的所有元素均不能满足predicate迭代函数(V1.5.0出错)
EX:
	var arr=[1,2,3,4,5];
	_.partition(arr,function(num){return num%2==0});  //

*Array数组函数组(array,arguments)
_.first(array,[n])  //返回数组的第一个元素,传递n参数将返回数组中从第一个元素开始的n个元素(返回数组中前n个元素)
EX:
	_.first([1,2,3,4,5]);  //1
	_.first([1,2,3,4,5],3);  //1,2,3
_.initial(array,[n])  //返回数组中除了最后一个元素外的其他全部元素,在arguments对象上特别有用.传递n参数将从结果中排除从最后一个开始的n个元素(排除数组后面的n个元素)。 
EX:
	_.initial([1,3,2,4,5]);  //1,3,2,4
	_.initial([1,3,2,4,5],3);  //1,3
_.last(array,[n])  //返回数组的最后一个元素.传递n参数将返回数组中从最后一个元素开始的n个元素(返回数组里的后面的n个元素)
EX:
	_.last([1,2,4,3,5]);  //5
	_.last([1,2,4,3,5],3);  //4,3,5
_.rest(array,[index])  //返回数组中除了第一个元素外的其他全部元素,传递index参数将返回从index开始的剩余所有元素
EX:
	_.rest([1,2,3,4,5]);  //2,3,4,5
	_.rest([1,2,3,4,5],2);  //3,4,5
_.compact(array)  //返回一个除去所有false值的array副本.在javascript中,false,null,0,"",undefined和NaN都是false值.
EX:_.compact([0,1,false,3]);  //1,3
_.flatten(array,[shallow])  //将一个嵌套多层的数组(嵌套可以是任何层数)转换为只有一层的数组。如果你传递shallow参数,数组将只减少一维的嵌套。
EX:
	_.flatten([1,[1,2],[[[3]]]]);  //1,1,2,3
	_.flatten([1,[1,2],[[[3]]]],true);  //1,1,2,[[3]]
_.without(array,*values)  //返回一个删除所有values值后的array副本(注:使用===表达式做相等测试)
EX:_.without([1,2,3,4,5],1,3);  //2,4,5
_.union(*arrays) 	//返回传入的数组并集:按顺序返回,返回数组的元素是唯一的,可以传入一个或多个数组
EX:_.union([1,2,4],[3,2,5],[3,1,4]);  //1,2,3,4,5
_.intersection(*arrays)  //返回传入数组的交集.结果中的每个值是存在于传入的每个数组里
EX:_.intersection([1,2,5],[1,5,3],[5,3,1]);  //1,5
_.difference(array,*others)   //类似于without,但返回的值来自array参数数组,并且不存在于other数组.
EX:_.difference([1,2,3,4,5],[6,2,4]);  //1,3,5 
_.uniq(array,[isSorted],[iteratee])  //返回array去重后的副本,使用===做相等测试. 如果您确定array已经排序,那么给isSorted参数传递true值,此函数将运行的更快的算法.如果要处理对象元素,传参iterator来获取要对比的属性.
EX:_.uniq([1,3,2,1,3,2,4,5]);  //1,3,2,4,5
_.zip(*arrays)  //将每个arrays中相应位置的值合并在一起。在合并分开保存的数据时很有用. 如果你用来处理矩阵嵌套数组时, _.zip.apply 可以做类似的效果。
EX:_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);  //[["moe", 30, true], ["larry", 40, false], ["curly", 50, false]]
_.object(list,[values])  //将数组转换为对象.传递任何一个单独[key, value]对的列表，或者一个键的列表和一个值得列表。如果存在重复键，最后一个值将被返回。
EX:
	_.object(["age","name"],[22,"aa"]);  //{"age":22,"name":"aa"}
	_.object([["age",22],["name","aa"]]);  //{"age":22,"name":"aa"}
_.indexOf(array,value,[isSorted])  //返回value在该array中的索引值,如果value不存在array中就返回-1.使用原生的indexOf函数,除非它失效.如果您正在使用一个大数组,你知道数组已经排序,传递true给isSorted将更快的用二进制搜索..,或者,传递一个数字作为第三个参数,为了在给定的索引的数组中寻找第一个匹配值。
EX:
	_.indexOf([1,2,3,4,5],2);  //1
	_.indexOf([1,2,3,4,5],4,4);  //-1
_.lastIndexOf(array,value,[fromIndex])  //返回value在该array中的从最后开始的索引值,如果value不存在array中就返回-1.如果支持原生的lastIndexOf,将使用原生的lastIndexOf函数.传递fromIndex将从你给定的索性值开始搜索。
EX:
	_.lastIndexOf([1,2,3,4,5,6],3);  //2
	_.lastIndexOf([1,2,3,4,5,6,3],3,4);  //2
_.sortedIndex(list,value,[iteratee],[context])  //使用二分查找确定value在list中的位置序号,value按此序号插入能保持list原有的排序.如果提供iterator函数，iterator将作为list排序的依据，包括你传递的value 。 iterator也可以是字符串的属性名用来排序(比如length)。
EX:
	_.sortedIndex([10, 20, 30, 40, 50], 35);  //3
	var stooges = [{name: 'moe', age: 40}, {name: 'curly', age: 60}];
	_.sortedIndex(stooges, {name: 'larry', age: 50}, 'age');  //1
_.range([start],stop,[step])  //一个用来创建整数灵活编号的列表的函数,便于each和map循环.如果省略start则默认为0;step默认为1.返回一个从start到stop的整数的列表,用step来增加(或减少)独占.值得注意的是,如果stop值在start前面(也就是stop值小于start值),那么值域会被认为是零长度,而不是负增长.如果你要一个负数的值域,请使用负数step.
EX:	
	_.range(1,10);  //1,2,3,4,5,6,7,8,9
	_.range(1,-5,-1);  //1,0,-1,-2,-3,-4
	
*Function与函数有关的函数
_.bind(function,object,*arguments)  //绑定函数function到对象object上,也就是无论何时调用函数,函数里的this都指向这个object
EX:
	function func(){
		return this.name;
	}
	func=_.bind(func,{"name":"aa"});
	func();  //aa
_.bindAll(object,*methodNames)  //把methodNames参数指定的一些方法绑定到object上,这些方法就会在对象的上下文环境中执行.绑定函数用作事件处理函数时非常便利,否则函数被调用时this一点用也没有.methodNames参数是必须的
EX:
	var buttonView={
		label:'underscore',
		onClick:function(){
			alert('clicked: '+this.label);
		}
	};
	_.bindAll(buttonView,'onClick');
	document.getElementById("box").onclick=buttonView.onClick;
_.partial(function,*arguments)  //局部调用一个函数,传人任意个数的参数,返回一个新函数
EX:
	function add(a,b){
		return a+b;
	}
	add5=_.partial(add,5);
	add5(10);  //15
_.memoize(function,[hashFunction])  //Memoizes方法可以缓存某函数的计算结果。对于耗时较长的计算是很有帮助的。如果传递了 hashFunction 参数，就用 hashFunction 的返回值作为key存储函数的计算结果。 hashFunction 默认使用function的第一个参数作为key。memoized值的缓存 可作为 返回函数的cache属性。 
_.delay(function,wait,*arguments)  //类似setTimeout,等待wait毫秒后调用function.如果传递可选的参数arguments,当函数function执行时,arguments会作为参数传入
EX:
	function demo(){
		alert("aa");
	}
	_.delay(demo,5000);
_.defer(function,*arguments)  //延迟调用function直到当前调用栈清空为止,类似使用延时为0的setTimeout方法.对于执行开销大的计算和无阻塞UI线程的HTML渲染时候非常有用.如果传递arguments参数,当函数function执行时,arguments会作为参数传入
EX:
	function demo(){
		alert("aa");
	}
	_.defer(demo);
_.throttle(function,wait,[options])  //创建并返回一个像节流阀一样的函数,当重复调用函数的时候,最多每隔wait毫秒调用一次该函数.对于想控制一些触发频率较高的事件有帮助.默认情况下,throttle将在你调用的第一时间尽快执行这个function,并且如果你在wait周期内调用任意次数的函数,都将尽快的被覆盖.如果你想禁用第一次首先执行的话,传递{leading: false},还有如果你想禁用最后一次执行的话,传递{trailing: false}
EX:
	var i=0;
	function count(){
		i++;
		return i;
	}
	var start=_.throttle(count,200);  //创建并返回一个像节流阀一样的函数
	window.onclick=start
_.debounce(function,wait,[immediate])  //返回function函数的防反跳版本,将延迟函数的执行(真正的执行)在函数最后一次调用时刻的wait毫秒之后.对于必须在一些输入（多是一些用户操作）停止到达之后执行的行为有帮助。例如:渲染一个Markdown格式的评论预览, 当窗口停止改变大小之后重新计算布局, 等等.传参immediate为true，debounce会在wait时间间隔的开始调用这个函数（注：并且在wait的时间之内不会再次调用）在类似不小心点了提交按钮两下而提交了两次的情况下很有用
_.once(function)  //创建一个只能调用一次的函数.重复调用改进的方法也没有效果,只会返回第一次执行时的结果.作为初始化函数使用时非常有用,不用再设一个boolean值来检查是否已经初始化完成.
EX:
	function create(){
		document.body.appendChild(document.createElement("div"));
	}
	var initialize=_.once(create);
	initialize();
	initialize();
	initialize();
_.after(count,function)  //创建一个函数,只有在运行了count次之后才有效果.在处理同组异步请求返回结果时,如果你要确保同组里所有异步请求完成之后才执行这个函数,这将非常有用。
_.before(count,function)  //创建一个函数,调用不超过count次.当count已经达到时,最后一个函数调用的结果是被记住并返回
_.wrap(function,wrapper)  //将第一个函数function封装到函数wrapper里面,并把函数function作为第一个参数传给wrapper.这样可以让wrapper在function运行之前和之后执行代码,调整参数然后附有条件地执行
_.negate(predicate)  //返回一个新的predicate函数的否定版本
_.compose(*functions)  //返回函数集functions组合后的复合函数,也就是一个函数执行完之后把返回的结果再作为参数赋给下一个函数来执行.以此类推.在数学里,把函数f(),g(),和h()组合起来可以得到复合函数 f(g(h()))。


















