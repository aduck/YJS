SASS
	变量
	混合
	继承
	插值
	关键词 
		!default(默认值,用于变量)  @extend(继承后跟选择器) @include(调用混合函数) @import(引入文件【可以在外部引用也可以在样式内部引用】) @mixin(声明混合函数)
---->>>>sass sass/base.scss:sass/base.css --style expanded
	* 属性里有变量时-webkit-#{$prop}:$val;
	* 变量可以存储行，混合可以存储块



FLEX布局(主轴和交叉轴)
	兼容(IE10+),设为Flex布局以后,子元素的float、clear和vertical-align属性将失效
	容器设置 .box{display:flex;display:-webkit-flex;}	.box{display:inline-flex;}	
	容器属性：
		flex-direction(排列方向)	row | row-reverse | column | column-reverse(默认主轴为水平方向,起点在左端 | 主轴为水平方向,起点在右端 | 主轴为垂直方向,起点在上沿 | 主轴为垂直方向,起点在下沿)
		flex-wrap(如何换行)		nowrap | wrap | wrap-reverse(默认不换行 | 换行,第一行在上方 | 换行,第一行在下方)
		flex-flow(是flex-direction属性和flex-wrap属性的简写形式,默认值为row nowrap)
		justify-content(项目在主轴上的对齐方式)		flex-start | flex-end | center | space-between | space-around(左对齐 | 右对齐 | 居中 | 两端对齐,项目之间的间隔都相等 | 每个项目两侧的间隔相等,项目之间的间隔比项目与边框的间隔大一倍)
		align-items(项目在交叉轴上如何对齐)		flex-start | flex-end | center | baseline | stretch(交叉轴的起点对齐 | 交叉轴的终点对齐 | 交叉轴的中点对齐 | 项目的第一行文字的基线对齐 | 默认如果项目未设置高度或设为auto,将占满整个容器的高度)
		align-content(多根轴线的对齐方式,如果项目只有一根主轴线,该属性不起作用)	flex-start | flex-end | center | space-between | space-around | stretch(与交叉轴的起点对齐 | 与交叉轴的终点对齐 | 与交叉轴的中点对齐 | 与交叉轴两端对齐,轴线之间的间隔平均分布 | 每根轴线两侧的间隔都相等,轴线之间的间隔比轴线与边框的间隔大一倍 | 默认轴线占满整个交叉轴)
	项目属性
		order(项目的排列顺序,数值越小排列越靠前,默认为0,可以为负值)
		flex-grow(项目的放大比例,默认为0,即如果存在剩余空间也不放大)
		flex-shrink(项目的缩小比例,默认为1,即如果空间不足该项目将缩小,设为0不缩小)
		flex-basis(在分配多余空间之前,项目占据的主轴空间,默认值为auto)
		flex(flex-grow,flex-shrink和flex-basis的简写,默认值为0 1 auto,后两个属性可选)
		align-self(允许单个项目有与其他项目不一样的对齐方式,可覆盖align-items属性,默认值为auto,表示继承父元素的align-items属性,如果没有父元素,则等同于stretch)
		
ReactJs
	this.props	传递数据的方式,XML风格属性取值(只读)
		this.props.key	组件的命名属性
		this.props.children	组件内嵌的元素
	
	this.state	组件状态,可以通过状态传递数据
		语法：this.state.data
		原则：最少,最小
		关于state和props的用法
			常改变的值用this.state获取,其他都用this.props
			
	this.setState()	更改状态,组件将自动重新渲染
		语法：this.setState({data:data})
	
	getInitialState	初始化状态方法
		return {data:[]};
	
	componentDidMount	组件被渲染的时候React自动调用的方法
	
	refs	子组件集合
		如：
		<input type="text" ref="demo" />
		获取子组件this.refs.demo
	
	getDOMNode()	获取组件对应的DOM元素
	
	事件绑定
		通过内联风格写在组件上
		如：
		<div id="box"></div>
		var Demo=React.createClass({
			handleClick:function(){
				this.setState({data:"Hi"});	
			},
			getInitialState:function(){
				return {data:"Hello World"};
			},
			render:function(){
				return (
					<h2 onClick={this.handleClick}>{this.state.data}</h2>
				);
			}
		});
		React.render(
			<Demo />,
			document.getElementById("box")
		);
	
	回调函数	回调函数作为组件的属性(一般为外层组件),然后在内部组件通过this.props.callback()调用	
		如：
		<div id="box"></div>
		var Ins=React.createClass({
			handleSubmit:function(e){
				e.preventDefault();
				var username=this.refs.username.getDOMNode().value;
				if(!username) return;
				this.props.onCallback(username);
				this.refs.username.getDOMNode().value="";
			},
			render:function(){
				return (
					<form className="demo" onSubmit={this.handleSubmit}>
						<input type="text" placeholder="insText" ref="username" />
						<input type="submit" value="更新" />
					</form>
				);
			}
		});
		var Show=React.createClass({
			getInitialState:function(){
				return {name:"aa"};
			},
			render:function(){
				return (
					<div className="show">{this.state.name}</div>
				);
			}
		});
		var Out=React.createClass({
			callback:function(text){
				this.refs.show.setState({name:text});
			},
			render:function(){
				return (
					<div className="out">
						<h1>更新用户名</h1>
						<Show ref="show" />
						<Ins onCallback={this.callback} />
					</div>
				);
			}
		});
		React.render(
			<Out />,
			document.getElementById("box")
		);
		

	
	
	
	