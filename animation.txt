*CSS3 Animation
常用动作：
	放大(zoom)	
		transform:scale(放大倍数);
	旋转(round)
		transform:rotate(旋转角度);
	移动(move)
		transform:translate(x坐标,y坐标);  //建议使用定位代替
	透明(opacity)
		opacity:透明度;
	...
基本概念：
	帧
		@keyframes demo{
			0% 		初始帧
			...		(补间动画)
			100% 	末尾帧
		}
	动画时间
		animation-duration
	速度曲线
		animation-timing-function
			linear 		动画从头到尾的速度是相同的
			ease		默认值,动画以低速开始,然后加快,在结束前变慢
			ease-in		动画以低速开始
			ease-out	动画以低速结束
			ease-in-out	动画以低速开始和结束
	动画延迟
		animation-delay
	播放次数
		animation-iteration-count
			infinite	无限循环播放
	下周期是否逆向播放
		animation-direction
			normal		正常播放
			alternate	动画应该轮流反向播放
	是否保留帧状态
		animation-fill-mode
			none 		不改变默认行为
			forwards	当动画完成后,保持最后一个属性值(在最后一个关键帧中定义)
			backwards	在animation-delay所指定的一段时间内,在动画显示之前,应用开始属性值(在第一个关键帧中定义)
			both		向前和向后填充模式都被应用
控制动画：
	通过animation-play-state来控制动画是否触发(paused,running) js动态添加删除active类
动画分解：
	不同的动画分几个不同的@keyframes去完成
		@keyframes round{
			//旋转动画
		}
		@keyframes zoom{
			//缩放动画
		}
		@keyframes fade{
			//显隐动画
		}
	然后根据需要用animation-delay延迟去组合动画
		如：这个动画是：边放大边旋转然后下落
		<!--html-->
			<div class="demo" id="demo">
				<div class="small"></div>
			</div>
		<!--css-->
			.demo{
				position:absolute;
				left:50%;
				top:0;
				width:100px;
				height:100px;
				margin-left:-50px;
				animation:zoom 2s both,drop 1s 2s both;
				animation-play-state:paused;
			}
			.small{
				height:100%;
				background-color:#35f;
			}
			.active .small{
				animation:round 2s both;
				animation-play-state:running;
			}
			.active.demo{
				animation-play-state:running;
			}
		<!--animation-->
			@keyframes round{
				0%{
					transform:rotate(0deg);
				}
				100%{
					transform:rotate(720deg);
				}
			}
			@keyframes zoom{
				0%{
					transform:scale(1);
				}
				100%{
					transform:scale(.5);
				}
			}
			@keyframes drop{
				0%{
					top:0;
				}
				100%{
					top:300px;
				}
			}
	*transform属性会相互覆盖,如在同一个元素上设置了旋转transform:rotate(360deg)后又设置了放大transform:scale(2),最后只会执行放大效果
		解决方法:在元素外部包裹一层div用来执行放大动画
一些准则
	不通过@keyframes确定动画初始位置
		考虑兼容性采取渐进增强的方法确保不支持动画的浏览器布局不会错乱
	不通过transform:translate()来定位
		当同时有旋转、缩放等会发生冲突,用定位去代替可以避免冲突
		不使用spin覆盖是考虑到动画的重用
		@keyframes spin-trans{
			0%{
				transform:rotate(0) translate(-50%,-50%); 
			}
			100%{
				transform:rotate(360deg) translate(-50%,-50%); 
			}
		}

*The Add SVG Part
svgxml格式
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	